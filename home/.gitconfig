[user]
  name = Giovanni Bassi
  email = giggio@giggio.net
[diff]
  indentHeuristic = true
  submodule = log
[color]
  diff = always
  interactive = always
  status = always
  branch = always
[alias]
  st = status
  ci = commit
  co = checkout
  br = branch
  pf = push --force-with-lease
  pushtag = push origin --tags
  fixup = commit --all --amend --no-edit
  open = "!openInBrowser() { \
            if [ -z \"$1\" ]; then \
              echo \"URL is empty.\"; \
              return; \
            fi; \
            echo "Opening $1" ...; \
            THIS_OS="$(uname -s)"; \
            case "$THIS_OS" in \
              Linux*) xdg-open $1;; \
              MSYS_NT*|MINGW*|CYGWIN*) explorer $1;; \
              *) echo \"unknown: $THIS_OS\";; \
            esac; \
          }; \
          browse() { \
            REMOTE=origin; \
            if ! [ -z \"$1\" ]; then \
              REMOTE=$1; \
            fi; \
            ORIGIN=`git config remote.$REMOTE.url`; \
            case $ORIGIN in \
              '') return;; \
              https://*) openInBrowser $ORIGIN;; \
              *) \
                HTTPS_URL=$(echo \"$ORIGIN\" | awk -F '@' '{print $2}' | awk -F ' ' '{print $1}' | sed 's/:/\\//g' | sed 's/.git//g' | awk '{print \"https://\"$1}' ); \
                openInBrowser "$HTTPS_URL";; \
            esac; \
          }; browse"
  browse = !git open
  up = push upstream master
  sync = pull upstream master --rebase
  which = !git branch | grep -i
  daily = !sh -c 'git log --since=yesterday --format=%s --author=\"`git config user.email`\"'
  serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git
  graph = log --graph
  ngrok = "!f() { \
            NGROK_WAIT=${NGROK_WAIT:-1}; \
            git serve & ngrok tcp 9418 > /dev/null 2>&1 & \
            echo >&2 "Waiting $NGROK_WAIT seconds for git daemon and ngrok to start..."; \
            sleep $NGROK_WAIT; \
            public_url=$(curl -s http://localhost:4040/api/tunnels/command_line | jq -r '.public_url[3:]'); \
            public_url="git$public_url/"; \
            echo "Serving repo at: $public_url"; \
            echo "Press CTRL C to stop."; \
            sleep infinity; \
          }; f"
  squash = "!f() { git reset --hard $1; git merge --squash HEAD@{1}; git commit; }; f"
  continue = "-c core.editor=true rebase --continue"
  a = add :/
  hooks = !\"$HOME/.githooks/bin/cli\"
  # todo: hooks-install is related to https://github.com/gabyx/Githooks/issues/140 and https://github.com/gabyx/Githooks/issues/139
  hooks-install = "!f() { \
                    git config core.hooksPath $(git config githooks.manualTemplateDir | git parse-env-vars)/hooks; \
                  }; f"
  # do not use, prefer hooks-install
  # todo: hooks-copy-hooks-files is related to https://github.com/gabyx/Githooks/issues/140 and https://github.com/gabyx/Githooks/issues/139
  hooks-copy-hooks-files = "!f() { \
                    local git_hooks_dir=$(git rev-parse --git-dir)/hooks; \
                    find $git_hooks_dir \\( -type l -or -type f \\) -delete; \
                    cp -d $(git config githooks.manualTemplateDir | git parse-env-vars)/hooks/* $git_hooks_dir; \
                  }; f"
  parse-env-vars = "!f() { \
                     awk '{ \
                       finalstr = $0; \
                       while (1) { \
                         if (match(finalstr, /\\$([A-Za-z0-9_]+)/)) { \
                           newstr = substr(finalstr, 1, RSTART - 1); \
                           newstr = newstr ENVIRON[substr(finalstr, RSTART + 1, RLENGTH - 1)]; \
                           newstr = newstr substr(finalstr, RSTART + RLENGTH); \
                           finalstr = newstr; \
                         } else { \
                           break; \
                         } \
                       } \
                       print finalstr; \
                     }'; \
                  }; f"
[pull]
  ff = only
[push]
  default = simple
  autoSetupRemote = true
[log]
  decorate = full
  abbrevCommit = true
[format]
  pretty=format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
[gui]
  gcwarning = false
[commit]
  gpgsign = true
[diff "pandoc2md"]
  textconv = pandoc --to=markdown
[diff "wrap"]
  textconv = fmt
[diff "xlsx"]
  textconv = python -m xlsx2csv
[diff "listzipfiles"]
  textconv = unzip -l
[merge "npm-merge-driver"]
  name = automatically merge npm lockfiles
  driver = npx npm-merge-driver merge %A %O %B %P
[init]
  defaultBranch = main
  # I was considering using githhoks in templating mode, but I think I prefer manual mode
  # I was using the environment variable `GIT_TEMPLATE_DIR`, as templateDir does not support variables in this config file
  # templateDir = $HOME/.gittemplate
[rerere]
  enabled = true
[core]
  pager = delta --dark
[credential]
  helper = store --file $HOME/.cache/git/credential/.git-credentials
[gpg]
[pack]
  windowMemory = 0
[githooks]
  # installDir = $HOME/.githooks # todo: pending: https://github.com/gabyx/Githooks/issues/139 # ignoring it uses the default
  cloneUrl = https://github.com/gabyx/githooks.git
  cloneBranch = main
  useCoreHooksPath = false
  useManual = true
  manualTemplateDir = $HOME/.gittemplate # todo: pending: https://github.com/gabyx/Githooks/issues/139 git the alias git hooks-install until it is solved
  runner = $HOME/.githooks/bin/runner # todo: pending: https://github.com/gabyx/Githooks/issues/139
  # dialog = $HOME/.githooks/bin/dialog # todo: not in use and pending: https://github.com/gabyx/Githooks/issues/139
  maintainedHooks = all
  autoUpdateEnabled = false
